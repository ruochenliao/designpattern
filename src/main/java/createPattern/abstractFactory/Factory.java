package createPattern.abstractFactory;

/**
 * 使用场景：
 * 产品种类单一，适合用工厂模式；如果有多个种类，每种种类又有不同类型时，通常用抽象工厂模式来创建
 *
 * 背景：
 * 在工厂方法中，一个工厂只能提供一个产品，但是我们希望一个工厂能够提供多个产品对象
 * 要求工厂既要生产同一类的产品，又要生产不同类的产品
 *
 * 定义：
 * 抽象工厂提供一个接口，用于创建相关或者依赖对象的家族，而不要指明具体的类
 *
 * factory 只关心产品族，产品等级由具体工厂关心
 * 具体工厂里，需要根据实际生产需求进行产品等级结构实现
 *
 * 对比工厂设计模式：
 * eg: 新增一种产品等级结构产品，
 * 抽象工厂设计模式：你只需要新增一个具体工厂类去实现 Factory
 * 工厂设计模式：Factory 中新增一个新的产品结构的产品，其他子工厂都需要实现 Factory 中新增的等级产品
 *
 * 缺点：修改新的产品族的时候，需要修改工厂及子类，所以在设计抽象工厂的时候，尽量扩展产品的等级结构，而不扩展产品族
 *
 */
public interface Factory {
    /**
     * pizza 是一个族类
     * @return
     */
    Pizza createPizza();

    /**
     * Milk 是一个族类
     * @return
     */
    Milk createMilk();
}
